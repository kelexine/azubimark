name: Build and Release AzubiMark

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release
      create_release:
        description: 'Create GitHub Release'
        required: false
        default: false
        type: boolean
      version_bump:
        description: 'Version bump type'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  JAVA_VERSION: '21'
  ANDROID_API_LEVEL: '34'
  ANDROID_BUILD_TOOLS: '34.0.0'

jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest
    
    outputs:
      version_name: ${{ steps.version.outputs.version_name }}
      version_code: ${{ steps.version.outputs.version_code }}
      apk_path_debug: ${{ steps.build.outputs.apk_path_debug }}
      apk_path_release: ${{ steps.build.outputs.apk_path_release }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: ${{ env.ANDROID_API_LEVEL }}
          build-tools: ${{ env.ANDROID_BUILD_TOOLS }}

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Extract version information
        id: version
        run: |
          VERSION_NAME=$(grep 'versionName' app/build.gradle.kts | sed 's/.*"\(.*\)".*/\1/')
          VERSION_CODE=$(grep 'versionCode' app/build.gradle.kts | sed 's/.*= \(.*\)/\1/')
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION_NAME ($VERSION_CODE)"

      - name: Version bump (if requested)
        if: inputs.version_bump != '' && inputs.create_release == true
        run: |
          current_version="${{ steps.version.outputs.version_name }}"
          current_code="${{ steps.version.outputs.version_code }}"
          
          # Parse semantic version
          IFS='.' read -ra VERSION_PARTS <<< "$current_version"
          major=${VERSION_PARTS[0]}
          minor=${VERSION_PARTS[1]}
          patch=${VERSION_PARTS[2]}
          
          # Increment based on bump type
          case "${{ inputs.version_bump }}" in
            "major")
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            "minor")
              minor=$((minor + 1))
              patch=0
              ;;
            "patch")
              patch=$((patch + 1))
              ;;
          esac
          
          new_version="${major}.${minor}.${patch}"
          new_code=$((current_code + 1))
          
          # Update build.gradle.kts
          sed -i "s/versionCode = $current_code/versionCode = $new_code/" app/build.gradle.kts
          sed -i "s/versionName = \"$current_version\"/versionName = \"$new_version\"/" app/build.gradle.kts
          
          echo "version_name=$new_version" >> $GITHUB_OUTPUT
          echo "version_code=$new_code" >> $GITHUB_OUTPUT
          echo "Updated version to: $new_version ($new_code)"

      - name: Build Debug APK
        if: inputs.release_type == 'debug' || inputs.release_type == 'both'
        run: ./gradlew assembleDebug --no-daemon --stacktrace

      - name: Build Release APK
        if: inputs.release_type == 'release' || inputs.release_type == 'both'
        env:
          # Add signing configuration if secrets are available
          AZUBIMARK_RELEASE_STORE_FILE: ${{ secrets.RELEASE_STORE_FILE }}
          AZUBIMARK_RELEASE_STORE_PASSWORD: ${{ secrets.RELEASE_STORE_PASSWORD }}
          AZUBIMARK_RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          AZUBIMARK_RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
        run: |
          if [[ -n "$AZUBIMARK_RELEASE_STORE_FILE" ]]; then
            echo "Building signed release APK"
            ./gradlew assembleRelease --no-daemon --stacktrace
          else
            echo "Building unsigned release APK (no signing secrets provided)"
            ./gradlew assembleRelease --no-daemon --stacktrace
          fi

      - name: Set build outputs
        id: build
        run: |
          if [[ -f "app/build/outputs/apk/debug/AzubiMark-${{ steps.version.outputs.version_name }}-debug.apk" ]]; then
            echo "apk_path_debug=app/build/outputs/apk/debug/AzubiMark-${{ steps.version.outputs.version_name }}-debug.apk" >> $GITHUB_OUTPUT
          fi
          if [[ -f "app/build/outputs/apk/release/AzubiMark-${{ steps.version.outputs.version_name }}-release.apk" ]]; then
            echo "apk_path_release=app/build/outputs/apk/release/AzubiMark-${{ steps.version.outputs.version_name }}-release.apk" >> $GITHUB_OUTPUT
          fi

      - name: Run tests
        run: ./gradlew test --no-daemon --continue

      - name: Run lint
        run: ./gradlew lintDebug --no-daemon --continue

      - name: Upload Debug APK
        if: inputs.release_type == 'debug' || inputs.release_type == 'both'
        uses: actions/upload-artifact@v4
        with:
          name: azubimark-debug-${{ steps.version.outputs.version_name }}
          path: app/build/outputs/apk/debug/*.apk
          retention-days: 30

      - name: Upload Release APK
        if: inputs.release_type == 'release' || inputs.release_type == 'both'
        uses: actions/upload-artifact@v4
        with:
          name: azubimark-release-${{ steps.version.outputs.version_name }}
          path: app/build/outputs/apk/release/*.apk
          retention-days: 90

      - name: Upload build reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-reports-${{ github.run_number }}
          path: |
            app/build/reports/
            app/build/outputs/logs/
          retention-days: 7

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: inputs.create_release == true
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download APK artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release assets
        id: prepare
        run: |
          mkdir -p ./release-assets
          
          # Copy APKs to release assets
          if [[ -d "./artifacts/azubimark-debug-${{ needs.build.outputs.version_name }}" ]]; then
            cp ./artifacts/azubimark-debug-${{ needs.build.outputs.version_name }}/*.apk ./release-assets/
          fi
          
          if [[ -d "./artifacts/azubimark-release-${{ needs.build.outputs.version_name }}" ]]; then
            cp ./artifacts/azubimark-release-${{ needs.build.outputs.version_name }}/*.apk ./release-assets/
          fi
          
          # List files for verification
          ls -la ./release-assets/
          
          # Generate checksums
          cd ./release-assets
          for file in *.apk; do
            if [[ -f "$file" ]]; then
              sha256sum "$file" >> checksums.txt
            fi
          done
          
          echo "release_tag=v${{ needs.build.outputs.version_name }}" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          ## AzubiMark v${{ needs.build.outputs.version_name }}
          
          ### 📱 Download
          
          - **Release APK**: For production use (recommended)
          - **Debug APK**: For testing and development
          
          ### 📋 Build Information
          
          - **Version**: ${{ needs.build.outputs.version_name }} (Build ${{ needs.build.outputs.version_code }})
          - **Target SDK**: Android 14 (API 34)
          - **Minimum SDK**: Android 8.0 (API 26)
          - **Built**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - **Commit**: ${{ github.sha }}
          
          ### 🔒 Verification
          
          You can verify the integrity of the downloaded APKs using the provided checksums.
          
          ### 📝 Installation
          
          1. Download the appropriate APK file
          2. Enable "Install from unknown sources" in your Android settings
          3. Install the APK file
          4. Enjoy using AzubiMark!
          
          ### 🐛 Issues & Feedback
          
          If you encounter any issues or have feedback, please [open an issue](https://github.com/kelexine/azubimark/issues).
          EOF

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.prepare.outputs.release_tag }}
          release_name: AzubiMark v${{ needs.build.outputs.version_name }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(needs.build.outputs.version_name, 'beta') || contains(needs.build.outputs.version_name, 'alpha') }}

      - name: Upload Release Assets
        run: |
          for file in ./release-assets/*; do
            if [[ -f "$file" ]]; then
              filename=$(basename "$file")
              echo "Uploading $filename..."
              
              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/octet-stream" \
                --data-binary @"$file" \
                "${{ steps.create_release.outputs.upload_url }}?name=${filename}"
            fi
          done

      - name: Commit version changes
        if: inputs.version_bump != ''
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add app/build.gradle.kts
          git commit -m "chore: bump version to ${{ needs.build.outputs.version_name }}" || exit 0
          git push

  notify:
    name: Notify Build Result
    runs-on: ubuntu-latest
    needs: [build, release]
    if: always()
    
    steps:
      - name: Build Success Notification
        if: needs.build.result == 'success'
        run: |
          echo "✅ Build completed successfully!"
          echo "Version: ${{ needs.build.outputs.version_name }}"
          echo "Build artifacts are available in the Actions tab."

      - name: Build Failure Notification
        if: needs.build.result == 'failure'
        run: |
          echo "❌ Build failed!"
          echo "Please check the build logs for details."
          exit 1

      - name: Release Success Notification
        if: needs.release.result == 'success' && inputs.create_release == true
        run: |
          echo "🚀 Release created successfully!"
          echo "GitHub release is now available with APK downloads."

      - name: Release Failure Notification
        if: needs.release.result == 'failure' && inputs.create_release == true
        run: |
          echo "⚠️ Build succeeded but release creation failed!"
          echo "APK artifacts are still available, but GitHub release was not created."